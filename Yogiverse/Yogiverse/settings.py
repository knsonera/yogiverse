"""
Django settings for Yogiverse project.
Generated by 'django-admin startproject' using Django 4.2.1.

"""

from pathlib import Path
# This is my code
from datetime import timedelta
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# End of my code.

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-l-ov3fm+n54!f(ymhn2^koxz)e^edaxc03)c+307s!nmeo_po2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

INSTALLED_APPS = [
    # I wrote this code.
    'YogiverseApp',
    'rest_framework',
    'corsheaders',
    'channels',
    # End of my code.
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # I wrote this code.
    'corsheaders.middleware.CorsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    # End of my code.
]

# Entry point for URL patterns
ROOT_URLCONF = 'Yogiverse.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Yogiverse.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# I wrote this code.
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'yogiverse_db',
        'USER': 'yogi',
        'PASSWORD': 'yogi',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}
# End of my code.

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# Define the URL for serving static files
STATIC_URL = '/static/'
# I wrote this code.
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage' # Making sure statics are correctly server with daphne

# Root directory for static files
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# End of my code.

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# I wrote this code.
# REST framework configurations
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

# Custom user model
AUTH_USER_MODEL = 'YogiverseApp.User'

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True  # !!! Check before production

# Just in case, allowing localhost
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

# WebSocket paths in CORS settings
CORS_ALLOW_WEBSOCKETS = True
CORS_ALLOW_CREDENTIALS = True

# Allowed headers
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Allowed methods
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
# End of my code.

# Use channels for routing
ASGI_APPLICATION = 'Yogiverse.routing.application'

# I wrote this code.

# Channel layer settings
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            # Redis server configuration
            "hosts": [('localhost', 6379)],
        },
    },
}

# Media files stored and served from:
MEDIA_ROOT = '/Users/auzhvieva/Desktop/awd/Yogiverse/media' # !!! absolute path to media folder
MEDIA_URL = '/media/'

# JWT token settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=14),
}
# End of my code.